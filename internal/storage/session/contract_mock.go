// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package session is a generated GoMock package.
package session

import (
	reflect "reflect"

	gophkeeper "github.com/egor-zakharov/goph-keeper/internal/proto/gophkeeper"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockStorage) Add(userID, sessionID string, stream gophkeeper.GophKeeperServer_SubscribeToChangesServer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", userID, sessionID, stream)
}

// Add indicates an expected call of Add.
func (mr *MockStorageMockRecorder) Add(userID, sessionID, stream interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockStorage)(nil).Add), userID, sessionID, stream)
}

// Get mocks base method.
func (m *MockStorage) Get(userID, sessionID string) map[string]gophkeeper.GophKeeperServer_SubscribeToChangesServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", userID, sessionID)
	ret0, _ := ret[0].(map[string]gophkeeper.GophKeeperServer_SubscribeToChangesServer)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockStorageMockRecorder) Get(userID, sessionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStorage)(nil).Get), userID, sessionID)
}
